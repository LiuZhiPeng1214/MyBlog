<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vite + Vue3 + EsLint + Prettier 配置指南：轻松上手</title>
      <link href="/LiuZhiPeng1214/2023/12/15/eslint-vue-pei-zhi/"/>
      <url>/LiuZhiPeng1214/2023/12/15/eslint-vue-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Vite-Vue3-EsLint-Prettier-配置指南：轻松上手"><a href="#Vite-Vue3-EsLint-Prettier-配置指南：轻松上手" class="headerlink" title="Vite + Vue3 + EsLint + Prettier 配置指南：轻松上手"></a>Vite + Vue3 + EsLint + Prettier 配置指南：轻松上手</h1><h3 id="1-使用Vite创建一个Vue项目"><a href="#1-使用Vite创建一个Vue项目" class="headerlink" title="1. 使用Vite创建一个Vue项目"></a>1. 使用Vite创建一个Vue项目</h3><pre class="line-numbers language-none"><code class="language-none">yarn create vite? Project name: 输入你的项目名称？（如: esvue）? Select a framework: 选择安装的脚手架 (这里选vue)    vanilla&gt;   vue    reactDone. Now run:  cd esvue  yarn  yarn dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-安装EsLint"><a href="#2-安装EsLint" class="headerlink" title="2. 安装EsLint"></a>2. 安装EsLint</h3><pre class="line-numbers language-none"><code class="language-none">yarn add eslint -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-初始化配置Eslint"><a href="#3-初始化配置Eslint" class="headerlink" title="3.初始化配置Eslint"></a>3.初始化配置Eslint</h3><pre class="line-numbers language-none"><code class="language-none">npx eslint --init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-1-选择模式-To-check-syntax-and-find-problems"><a href="#3-1-选择模式-To-check-syntax-and-find-problems" class="headerlink" title="3.1 选择模式 (To check syntax and find problems)"></a>3.1 选择模式 (To check syntax and find problems)</h4><pre class="line-numbers language-none"><code class="language-none">You can also run this command directly using 'npm init @eslint/config'.? How would you like to use ESLint? ...   To check syntax only&gt; To check syntax and find problems  To check syntax, find problems, and enforce code style<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-选择语言模块-选JavaScript-modules"><a href="#3-2-选择语言模块-选JavaScript-modules" class="headerlink" title="3.2 选择语言模块(选JavaScript modules)"></a>3.2 选择语言模块(选JavaScript modules)</h4><pre class="line-numbers language-none"><code class="language-none">? What type of modules does your project use? ...&gt; JavaScript modules (import/export)  CommonJS (require/exports)  None of these<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-选择语言框架-选Vue-js"><a href="#3-3-选择语言框架-选Vue-js" class="headerlink" title="3.3 选择语言框架(选Vue.js)"></a>3.3 选择语言框架(选Vue.js)</h4><pre class="line-numbers language-none"><code class="language-none">? Which framework does your project use? ...  React&gt; Vue.js  None of these<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-是否使用ts-视自己情况而定"><a href="#3-4-是否使用ts-视自己情况而定" class="headerlink" title="3.4 是否使用ts (视自己情况而定)"></a>3.4 是否使用ts (视自己情况而定)</h4><pre class="line-numbers language-none"><code class="language-none">? Does your project use TypeScript? » No / Yes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-5代码在哪里运行-用空格选中-Browser-Node"><a href="#3-5代码在哪里运行-用空格选中-Browser-Node" class="headerlink" title="3.5代码在哪里运行 (用空格选中 Browser+Node)"></a>3.5代码在哪里运行 (用空格选中 Browser+Node)</h4><pre class="line-numbers language-none"><code class="language-none">? Where does your code run? ...  (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)√ Browser√ Node<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-6-您希望您的配置文件是什么格式-选JavaScript"><a href="#3-6-您希望您的配置文件是什么格式-选JavaScript" class="headerlink" title="3.6 您希望您的配置文件是什么格式? (选JavaScript)"></a>3.6 您希望您的配置文件是什么格式? (选JavaScript)</h4><pre class="line-numbers language-none"><code class="language-none">? What format do you want your config file to be in? ...&gt; JavaScript  YAML  JSON<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-7您想现在安装它们吗-选择Yes"><a href="#3-7您想现在安装它们吗-选择Yes" class="headerlink" title="3.7您想现在安装它们吗? (选择Yes)"></a>3.7您想现在安装它们吗? (选择Yes)</h4><pre class="line-numbers language-none"><code class="language-none">? Would you like to install them now? » No / Yes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-8-您要使用哪个软件包管理器？-选择yarn"><a href="#3-8-您要使用哪个软件包管理器？-选择yarn" class="headerlink" title="3.8 您要使用哪个软件包管理器？ (选择yarn)"></a>3.8 您要使用哪个软件包管理器？ (选择yarn)</h4><pre class="line-numbers language-none"><code class="language-none">? Which package manager do you want to use? ...  npm&gt; yarn  pnpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-安装完成后-在项目根目录会出现-eslintrc-js文件"><a href="#4-安装完成后-在项目根目录会出现-eslintrc-js文件" class="headerlink" title="4 安装完成后 (在项目根目录会出现.eslintrc.js文件)"></a>4 安装完成后 (在项目根目录会出现.eslintrc.js文件)</h3><pre class="line-numbers language-none"><code class="language-none">// .eslintrc.js 文件// 这里就是上面3步骤初始化的文件,后面的配置都写这里module.exports = {  env: {    browser: true,    es2021: true,    node: true  },  extends: "eslint:recommended",  parserOptions: {    ecmaVersion: 'latest',    sourceType: 'module'  },  rules: {  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-继续安装-vite-plugin-eslint"><a href="#5-继续安装-vite-plugin-eslint" class="headerlink" title="5 继续安装 vite-plugin-eslint"></a>5 继续安装 vite-plugin-eslint</h3><pre class="line-numbers language-none"><code class="language-none">// 说明: 该包是用于配置vite运行的时候自动检测eslint规范// 问题: 不装这个包可以吗? 答案是“可以的”,使用yarn dev时并不会主动检查代码yarn add -D vite-plugin-eslint<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-继续安装-eslint-parser"><a href="#6-继续安装-eslint-parser" class="headerlink" title="6 继续安装 eslint-parser"></a>6 继续安装 eslint-parser</h3><pre class="line-numbers language-none"><code class="language-none">yarn add -D @babel/core             yarn add -D @babel/eslint-parser<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-继续安装prettier-用于规范代码格式-不需要可以不装"><a href="#7-继续安装prettier-用于规范代码格式-不需要可以不装" class="headerlink" title="7 继续安装prettier (用于规范代码格式,不需要可以不装)"></a>7 继续安装prettier (用于规范代码格式,不需要可以不装)</h3><pre class="line-numbers language-none"><code class="language-none">yarn add -D prettieryarn add -D eslint-config-prettier // eslint兼容的插件yarn add -D eslint-plugin-prettier // eslint的prettier<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-配置-vite-config-js"><a href="#8-配置-vite-config-js" class="headerlink" title="8 配置 vite.config.js"></a>8 配置 vite.config.js</h3><pre class="line-numbers language-none"><code class="language-none">import { defineConfig } from 'vite'import vue from '@vitejs/plugin-vue'import eslintPlugin from 'vite-plugin-eslint' //导入包export default defineConfig({  plugins: [    vue(),    // 增加下面的配置项,这样在运行时就能检查eslint规范    eslintPlugin({      include: ['src/**/*.js', 'src/**/*.vue', 'src/*.js', 'src/*.vue']    })  ]})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-配置-prettierrc"><a href="#9-配置-prettierrc" class="headerlink" title="9 配置 .prettierrc"></a>9 配置 .prettierrc</h3><blockquote><p>如果您没有安装第7步骤的那三个包,这个配置你可以忽略跳过<br>这里主要配置代码的格式规范的,有些设置要与.eslintrc.js配置一致,防止冲突</p></blockquote><pre class="line-numbers language-none"><code class="language-none">// 在项目根目录创建文件 .prettierrc// 以下配置视自己情况而定,并步是每个都需要的{  tabWidth: 4,               // 使用4个空格缩进  semi: false,               // 代码结尾是否加分号  trailingComma: 'none',     // 代码末尾不需要逗号  singleQuote: true,         // 是否使用单引号  printWidth: 100,           // 超过多少字符强制换行  arrowParens: 'avoid',      // 单个参数的箭头函数不加括号 x =&gt; x  bracketSpacing: true,      // 对象大括号内两边是否加空格 { a:0 }  endOfLine: 'auto',         // 文件换行格式 LF/CRLF  useTabs: false,            // 不使用缩进符,而使用空格  quoteProps: 'as-needed',   // 对象的key仅在必要时用引号  jsxSingleQuote: false,     // jsx不使用单引号,而使用双引号  jsxBracketSameLine: false, // jsx标签的反尖括号需要换行  rangeStart: 0,             // 每个文件格式化的范围是文件的全部内容  rangeEnd: Infinity,        // 结尾  requirePragma: false,      // 不需要写文件开头的 @prettier  insertPragma: false,       // 不需要自动在文件开头插入 @prettier  proseWrap: 'preserve',     // 使用默认的折行标准  htmlWhitespaceSensitivity: 'css'  // 根据显示样式决定html要不要折行}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-配置-eslintrc-js"><a href="#10-配置-eslintrc-js" class="headerlink" title="10 配置 .eslintrc.js"></a>10 配置 .eslintrc.js</h3><pre class="line-numbers language-none"><code class="language-none">module.exports = {    "env": {        "browser": true,        "es2021": true,        "node": true    },    "extends": [        "eslint:recommended",         // 使用推荐的eslint        'plugin:vue/vue3-recommended' // 使用插件支持vue3         // 如果你没有安装第7步,以下两个包不要引入,否则报错         'plugin:prettier/recommended',         'eslint-config-prettier'    ],    "parserOptions": {        "ecmaVersion": 13,        "sourceType": "module",        "ecmaFeatures": {            "modules": true,            'jsx': true        },        "requireConfigFile": false,        "parser": '@babel/eslint-parser'    },    // eslint-plugin-vue     'plugins': [        'vue'      // 引入vue的插件 vue &lt;==&gt; eslint-plugin-vue         // 这个包需要安装了第7步的三个包再引入        'prettier' // 引入规范插件  prettier &lt;==&gt;  eslint-plugin-prettier    ],    'globals': {        defineProps: 'readonly',        defineEmits: 'readonly',        defineExpose: 'readonly',        withDefaults: 'readonly'    },    // 这里时配置规则的,自己看情况配置    "rules": {        'semi': ['warn', 'never'],           // 禁止尾部使用分号        'no-console': 'warn',                // 禁止出现console        'no-debugger': 'warn',               // 禁止出现debugger        'no-duplicate-case': 'warn',         // 禁止出现重复case        'no-empty': 'warn',                  // 禁止出现空语句块        'no-extra-parens': 'warn',           // 禁止不必要的括号        'no-func-assign': 'warn',            // 禁止对Function声明重新赋值        'no-unreachable': 'warn',            // 禁止出现[return|throw]之后的代码块        'no-else-return': 'warn',            // 禁止if语句中return语句之后有else块        'no-empty-function': 'warn',         // 禁止出现空的函数块        'no-lone-blocks': 'warn',            // 禁用不必要的嵌套块        'no-multi-spaces': 'warn',           // 禁止使用多个空格        'no-redeclare': 'warn',              // 禁止多次声明同一变量        'no-return-assign': 'warn',          // 禁止在return语句中使用赋值语句        'no-return-await': 'warn',           // 禁用不必要的[return/await]        'no-self-compare': 'warn',           // 禁止自身比较表达式        'no-useless-catch': 'warn',          // 禁止不必要的catch子句        'no-useless-return': 'warn',         // 禁止不必要的return语句        'no-mixed-spaces-and-tabs': 'warn',  // 禁止空格和tab的混合缩进        'no-multiple-empty-lines': 'warn',   // 禁止出现多行空行        'no-trailing-spaces': 'warn',        // 禁止一行结束后面不要有空格        'no-useless-call': 'warn',           // 禁止不必要的.call()和.apply()        'no-var': 'warn',                    // 禁止出现var用let和const代替        'no-delete-var': 'off',              // 允许出现delete变量的使用        'no-shadow': 'off',                  // 允许变量声明与外层作用域的变量同名        'dot-notation': 'warn',              // 要求尽可能地使用点号        'default-case': 'warn',              // 要求switch语句中有default分支        'eqeqeq': 'warn',                    // 要求使用 === 和 !==        'curly': 'warn',                     // 要求所有控制语句使用一致的括号风格        'space-before-blocks': 'warn',       // 要求在块之前使用一致的空格        'space-in-parens': 'warn',           // 要求在圆括号内使用一致的空格        'space-infix-ops': 'warn',           // 要求操作符周围有空格        'space-unary-ops': 'warn',           // 要求在一元操作符前后使用一致的空格        'switch-colon-spacing': 'warn',      // 要求在switch的冒号左右有空格        'arrow-spacing': 'warn',             // 要求箭头函数的箭头前后使用一致的空格        'array-bracket-spacing': 'warn',     // 要求数组方括号中使用一致的空格        'brace-style': 'warn',               // 要求在代码块中使用一致的大括号风格        'camelcase': 'warn',                 // 要求使用骆驼拼写法命名约定        'indent': ['warn', 4],               // 要求使用JS一致缩进4个空格        'max-depth': ['warn', 4],            // 要求可嵌套的块的最大深度4        'max-statements': ['warn', 100],     // 要求函数块最多允许的的语句数量20        'max-nested-callbacks': ['warn', 3], // 要求回调函数最大嵌套深度3        'max-statements-per-line': ['warn', { max: 1 }],   // 要求每一行中所允许的最大语句数量        "quotes": ["warn", "single", "avoid-escape"],      // 要求统一使用单引号符号        "vue/require-default-prop": 0,                     // 关闭属性参数必须默认值        "vue/singleline-html-element-content-newline": 0,  // 关闭单行元素必须换行符        "vue/multiline-html-element-content-newline": 0,   // 关闭多行元素必须换行符        // 要求每一行标签的最大属性不超五个        'vue/max-attributes-per-line': ['warn', { singleline: 5 }],        // 要求html标签的缩进为需要4个空格        "vue/html-indent": ["warn", 4, {            "attribute": 1,            "baseIndent": 1,            "closeBracket": 0,            "alignAttributesVertically": true,            "ignores": []        }],        // 取消关闭标签不能自闭合的限制设置        "vue/html-self-closing": ["error", {                          "html": {                "void": "always",                "normal": "never",                "component": "always"            },            "svg": "always",            "math": "always"        }]       }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-配置VScode"><a href="#11-配置VScode" class="headerlink" title="11 配置VScode"></a>11 配置VScode</h3><blockquote><p>安装“ESLint”插件【作者: Microsoft】<br>安装“Prettier ESLint”插件 【作者：Rebecca Vest】</p></blockquote><pre class="line-numbers language-none"><code class="language-none">// 配置vscode// 打开：设置 -&gt; 文本编辑器 -&gt; 字体 -&gt; 在 settings.json 中编辑// settings.json文件{ // vscode默认启用了根据文件类型自动设置tabsize的选项 "editor.detectIndentation": false, // 重新设定tabsize "editor.tabSize": 2, // 每次保存的时候自动格式化  "editor.formatOnSave": true, // 每次保存的时候将代码按eslint格式进行修复 "eslint.autoFixOnSave": true, // 添加vue支持 "eslint.validate": [      "javascript",      "javascriptreact",      {           "language": "vue",           "autoFix": true      } ], // #让prettier使用eslint的代码格式进行校验  "prettier.eslintIntegration": true}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Vite </tag>
            
            <tag> Vue3 </tag>
            
            <tag> EsLint </tag>
            
            <tag> Prettier </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/LiuZhiPeng1214/2023/12/15/hello-world/"/>
      <url>/LiuZhiPeng1214/2023/12/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><p>111</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">/* **********************************************     Begin prism-core.js********************************************** *//// &lt;reference lib="WebWorker"/&gt;var _self = (typeof window !== 'undefined')? window   // if in browser: ((typeof WorkerGlobalScope !== 'undefined' &amp;&amp; self instanceof WorkerGlobalScope)? self // if in worker: {}   // if in node js);/** * Prism: Lightweight, robust, elegant syntax highlighting * * @license MIT &lt;https://opensource.org/licenses/MIT&gt; * @author Lea Verou &lt;https://lea.verou.me&gt; * @namespace * @public */var Prism = (function (_self) {// Private helper varsvar lang = /(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i;var uniqueId = 0;// The grammar object for plaintextvar plainTextGrammar = {};var _ = {/** * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load * additional languages or plugins yourself. * * By setting this value to `true`, Prism will not automatically highlight all code elements on the page. * * You obviously have to change this value before the automatic highlighting started. To do this, you can add an * empty Prism object into the global scope before loading the Prism script like this: * * ```js * window.Prism = window.Prism || {}; * Prism.manual = true; * // add a new &lt;script&gt; to load Prism's script * ``` * * @default false * @type {boolean} * @memberof Prism * @public */manual: _self.Prism &amp;&amp; _self.Prism.manual,/** * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your * own worker, you don't want it to do this. * * By setting this value to `true`, Prism will not add its own listeners to the worker. * * You obviously have to change this value before Prism executes. To do this, you can add an * empty Prism object into the global scope before loading the Prism script like this: * * ```js * window.Prism = window.Prism || {}; * Prism.disableWorkerMessageHandler = true; * // Load Prism's script * ``` * * @default false * @type {boolean} * @memberof Prism * @public */disableWorkerMessageHandler: _self.Prism &amp;&amp; _self.Prism.disableWorkerMessageHandler,/** * A namespace for utility methods. * * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may * change or disappear at any time. * * @namespace * @memberof Prism */util: {encode: function encode(tokens) {if (tokens instanceof Token) {return new Token(tokens.type, encode(tokens.content), tokens.alias);} else if (Array.isArray(tokens)) {return tokens.map(encode);} else {return tokens.replace(/&amp;/g, '&amp;').replace(/&lt;/g, '&lt;').replace(/\u00a0/g, ' ');}},/** * Returns the name of the type of the given value. * * @param {any} o * @returns {string} * @example * type(null)      === 'Null' * type(undefined) === 'Undefined' * type(123)       === 'Number' * type('foo')     === 'String' * type(true)      === 'Boolean' * type([1, 2])    === 'Array' * type({})        === 'Object' * type(String)    === 'Function' * type(/abc+/)    === 'RegExp' */type: function (o) {return Object.prototype.toString.call(o).slice(8, -1);},/** * Returns a unique number for the given object. Later calls will still return the same number. * * @param {Object} obj * @returns {number} */objId: function (obj) {if (!obj['__id']) {Object.defineProperty(obj, '__id', { value: ++uniqueId });}return obj['__id'];},/** * Creates a deep clone of the given object. * * The main intended use of this function is to clone language definitions. * * @param {T} o * @param {Record&lt;number, any&gt;} [visited] * @returns {T} * @template T */clone: function deepClone(o, visited) {visited = visited || {};var clone; var id;switch (_.util.type(o)) {case 'Object':id = _.util.objId(o);if (visited[id]) {return visited[id];}clone = /** @type {Record&lt;string, any&gt;} */ ({});visited[id] = clone;for (var key in o) {if (o.hasOwnProperty(key)) {clone[key] = deepClone(o[key], visited);}}return /** @type {any} */ (clone);case 'Array':id = _.util.objId(o);if (visited[id]) {return visited[id];}clone = [];visited[id] = clone;(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {clone[i] = deepClone(v, visited);});return /** @type {any} */ (clone);default:return o;}},/** * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class. * * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned. * * @param {Element} element * @returns {string} */getLanguage: function (element) {while (element) {var m = lang.exec(element.className);if (m) {return m[1].toLowerCase();}element = element.parentElement;}return 'none';},/** * Sets the Prism `language-xxxx` class of the given element. * * @param {Element} element * @param {string} language * @returns {void} */setLanguage: function (element, language) {// remove all `language-xxxx` classes// (this might leave behind a leading space)element.className = element.className.replace(RegExp(lang, 'gi'), '');// add the new `language-xxxx` class// (using `classList` will automatically clean up spaces for us)element.classList.add('language-' + language);},/** * Returns the script element that is currently executing. * * This does __not__ work for line script element. * * @returns {HTMLScriptElement | null} */currentScript: function () {if (typeof document === 'undefined') {return null;}if ('currentScript' in document &amp;&amp; 1 &lt; 2 /* hack to trip TS' flow analysis */) {return /** @type {any} */ (document.currentScript);}// IE11 workaround// we'll get the src of the current script by parsing IE11's error stack trace// this will not work for inline scriptstry {throw new Error();} catch (err) {// Get file src url from stack. Specifically works with the format of stack traces in IE.// A stack will look like this://// Error//    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)//    at Global code (http://localhost/components/prism-core.js:606:1)var src = (/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(err.stack) || [])[1];if (src) {var scripts = document.getElementsByTagName('script');for (var i in scripts) {if (scripts[i].src == src) {return scripts[i];}}}return null;}},/** * Returns whether a given class is active for `element`. * * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the * given class is just the given class with a `no-` prefix. * * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its * ancestors have the given class or the negated version of it, then the default activation will be returned. * * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated * version of it, the class is considered active. * * @param {Element} element * @param {string} className * @param {boolean} [defaultActivation=false] * @returns {boolean} */isActive: function (element, className, defaultActivation) {var no = 'no-' + className;while (element) {var classList = element.classList;if (classList.contains(className)) {return true;}if (classList.contains(no)) {return false;}element = element.parentElement;}return !!defaultActivation;}},/** * This namespace contains all currently loaded languages and the some helper functions to create and modify languages. * * @namespace * @memberof Prism * @public */languages: {/** * The grammar for plain, unformatted text. */plain: plainTextGrammar,plaintext: plainTextGrammar,text: plainTextGrammar,txt: plainTextGrammar,/** * Creates a deep copy of the language with the given id and appends the given tokens. * * If a token in `redef` also appears in the copied language, then the existing token in the copied language * will be overwritten at its original position. * * ## Best practices * * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language) * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to * understand the language definition because, normally, the order of tokens matters in Prism grammars. * * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens. * Furthermore, all non-overwriting tokens should be placed after the overwriting ones. * * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`. * @param {Grammar} redef The new tokens to append. * @returns {Grammar} The new language created. * @public * @example * Prism.languages['css-with-colors'] = Prism.languages.extend('css', { *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token *     // at its original position *     'comment': { ... }, *     // CSS doesn't have a 'color' token, so this token will be appended *     'color': /\b(?:red|green|blue)\b/ * }); */extend: function (id, redef) {var lang = _.util.clone(_.languages[id]);for (var key in redef) {lang[key] = redef[key];}return lang;},/** * Inserts tokens _before_ another token in a language definition or any other grammar. * * ## Usage * * This helper method makes it easy to modify existing languages. For example, the CSS language definition * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded * in HTML through `&lt;style&gt;` elements. To do this, it needs to modify `Prism.languages.markup` and add the * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do * this: * * ```js * Prism.languages.markup.style = { *     // token * }; * ``` * * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens * before existing tokens. For the CSS example above, you would use it like this: * * ```js * Prism.languages.insertBefore('markup', 'cdata', { *     'style': { *         // token *     } * }); * ``` * * ## Special cases * * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar * will be ignored. * * This behavior can be used to insert tokens after `before`: * * ```js * Prism.languages.insertBefore('markup', 'comment', { *     'comment': Prism.languages.markup.comment, *     // tokens after 'comment' * }); * ``` * * ## Limitations * * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily * deleting properties which is necessary to insert at arbitrary positions. * * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object. * Instead, it will create a new object and replace all references to the target object with the new one. This * can be done without temporarily deleting properties, so the iteration order is well-defined. * * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if * you hold the target object in a variable, then the value of the variable will not change. * * ```js * var oldMarkup = Prism.languages.markup; * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... }); * * assert(oldMarkup !== Prism.languages.markup); * assert(newMarkup === Prism.languages.markup); * ``` * * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the * object to be modified. * @param {string} before The key to insert before. * @param {Grammar} insert An object containing the key-value pairs to be inserted. * @param {Object&lt;string, any&gt;} [root] The object containing `inside`, i.e. the object that contains the * object to be modified. * * Defaults to `Prism.languages`. * @returns {Grammar} The new grammar object. * @public */insertBefore: function (inside, before, insert, root) {root = root || /** @type {any} */ (_.languages);var grammar = root[inside];/** @type {Grammar} */var ret = {};for (var token in grammar) {if (grammar.hasOwnProperty(token)) {if (token == before) {for (var newToken in insert) {if (insert.hasOwnProperty(newToken)) {ret[newToken] = insert[newToken];}}}// Do not insert token which also occur in insert. See #1525if (!insert.hasOwnProperty(token)) {ret[token] = grammar[token];}}}var old = root[inside];root[inside] = ret;// Update references in other language definitions_.languages.DFS(_.languages, function (key, value) {if (value === old &amp;&amp; key != inside) {this[key] = ret;}});return ret;},// Traverse a language definition with Depth First SearchDFS: function DFS(o, callback, type, visited) {visited = visited || {};var objId = _.util.objId;for (var i in o) {if (o.hasOwnProperty(i)) {callback.call(o, i, o[i], type || i);var property = o[i];var propertyType = _.util.type(property);if (propertyType === 'Object' &amp;&amp; !visited[objId(property)]) {visited[objId(property)] = true;DFS(property, callback, null, visited);} else if (propertyType === 'Array' &amp;&amp; !visited[objId(property)]) {visited[objId(property)] = true;DFS(property, callback, i, visited);}}}}},plugins: {},/** * This is the most high-level function in Prism’s API. * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on * each one of them. * * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`. * * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}. * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}. * @memberof Prism * @public */highlightAll: function (async, callback) {_.highlightAllUnder(document, async, callback);},/** * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls * {@link Prism.highlightElement} on each one of them. * * The following hooks will be run: * 1. `before-highlightall` * 2. `before-all-elements-highlight` * 3. All hooks of {@link Prism.highlightElement} for each element. * * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted. * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers. * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done. * @memberof Prism * @public */highlightAllUnder: function (container, async, callback) {var env = {callback: callback,container: container,selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};_.hooks.run('before-highlightall', env);env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));_.hooks.run('before-all-elements-highlight', env);for (var i = 0, element; (element = env.elements[i++]);) {_.highlightElement(element, async === true, env.callback);}},/** * Highlights the code inside a single element. * * The following hooks will be run: * 1. `before-sanity-check` * 2. `before-highlight` * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`. * 4. `before-insert` * 5. `after-highlight` * 6. `complete` * * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for * the element's language. * * @param {Element} element The element containing the code. * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier. * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default). * * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for * asynchronous highlighting to work. You can build your own bundle on the * [Download page](https://prismjs.com/download.html). * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done. * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously. * @memberof Prism * @public */highlightElement: function (element, async, callback) {// Find languagevar language = _.util.getLanguage(element);var grammar = _.languages[language];// Set language on the element, if not present_.util.setLanguage(element, language);// Set language on the parent, for stylingvar parent = element.parentElement;if (parent &amp;&amp; parent.nodeName.toLowerCase() === 'pre') {_.util.setLanguage(parent, language);}var code = element.textContent;var env = {element: element,language: language,grammar: grammar,code: code};function insertHighlightedCode(highlightedCode) {env.highlightedCode = highlightedCode;_.hooks.run('before-insert', env);env.element.innerHTML = env.highlightedCode;_.hooks.run('after-highlight', env);_.hooks.run('complete', env);callback &amp;&amp; callback.call(env.element);}_.hooks.run('before-sanity-check', env);// plugins may change/add the parent/elementparent = env.element.parentElement;if (parent &amp;&amp; parent.nodeName.toLowerCase() === 'pre' &amp;&amp; !parent.hasAttribute('tabindex')) {parent.setAttribute('tabindex', '0');}if (!env.code) {_.hooks.run('complete', env);callback &amp;&amp; callback.call(env.element);return;}_.hooks.run('before-highlight', env);if (!env.grammar) {insertHighlightedCode(_.util.encode(env.code));return;}if (async &amp;&amp; _self.Worker) {var worker = new Worker(_.filename);worker.onmessage = function (evt) {insertHighlightedCode(evt.data);};worker.postMessage(JSON.stringify({language: env.language,code: env.code,immediateClose: true}));} else {insertHighlightedCode(_.highlight(env.code, env.grammar, env.language));}},/** * Low-level function, only use if you know what you’re doing. It accepts a string of text as input * and the language definitions to use, and returns a string with the HTML produced. * * The following hooks will be run: * 1. `before-tokenize` * 2. `after-tokenize` * 3. `wrap`: On each {@link Token}. * * @param {string} text A string with the code to be highlighted. * @param {Grammar} grammar An object containing the tokens to use. * * Usually a language definition like `Prism.languages.markup`. * @param {string} language The name of the language definition passed to `grammar`. * @returns {string} The highlighted HTML. * @memberof Prism * @public * @example * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript'); */highlight: function (text, grammar, language) {var env = {code: text,grammar: grammar,language: language};_.hooks.run('before-tokenize', env);if (!env.grammar) {throw new Error('The language "' + env.language + '" has no grammar.');}env.tokens = _.tokenize(env.code, env.grammar);_.hooks.run('after-tokenize', env);return Token.stringify(_.util.encode(env.tokens), env.language);},/** * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input * and the language definitions to use, and returns an array with the tokenized code. * * When the language definition includes nested tokens, the function is called recursively on each of these tokens. * * This method could be useful in other contexts as well, as a very crude parser. * * @param {string} text A string with the code to be highlighted. * @param {Grammar} grammar An object containing the tokens to use. * * Usually a language definition like `Prism.languages.markup`. * @returns {TokenStream} An array of strings and tokens, a token stream. * @memberof Prism * @public * @example * let code = `var foo = 0;`; * let tokens = Prism.tokenize(code, Prism.languages.javascript); * tokens.forEach(token =&gt; { *     if (token instanceof Prism.Token &amp;&amp; token.type === 'number') { *         console.log(`Found numeric literal: ${token.content}`); *     } * }); */tokenize: function (text, grammar) {var rest = grammar.rest;if (rest) {for (var token in rest) {grammar[token] = rest[token];}delete grammar.rest;}var tokenList = new LinkedList();addAfter(tokenList, tokenList.head, text);matchGrammar(text, tokenList, grammar, tokenList.head, 0);return toArray(tokenList);},/** * @namespace * @memberof Prism * @public */hooks: {all: {},/** * Adds the given callback to the list of callbacks for the given hook. * * The callback will be invoked when the hook it is registered for is run. * Hooks are usually directly run by a highlight function but you can also run hooks yourself. * * One callback function can be registered to multiple hooks and the same hook multiple times. * * @param {string} name The name of the hook. * @param {HookCallback} callback The callback function which is given environment variables. * @public */add: function (name, callback) {var hooks = _.hooks.all;hooks[name] = hooks[name] || [];hooks[name].push(callback);},/** * Runs a hook invoking all registered callbacks with the given environment variables. * * Callbacks will be invoked synchronously and in the order in which they were registered. * * @param {string} name The name of the hook. * @param {Object&lt;string, any&gt;} env The environment variables of the hook passed to all callbacks registered. * @public */run: function (name, env) {var callbacks = _.hooks.all[name];if (!callbacks || !callbacks.length) {return;}for (var i = 0, callback; (callback = callbacks[i++]);) {callback(env);}}},Token: Token};_self.Prism = _;// Typescript note:// The following can be used to import the Token type in JSDoc:////   @typedef {InstanceType&lt;import("./prism-core")["Token"]&gt;} Token/** * Creates a new token. * * @param {string} type See {@link Token#type type} * @param {string | TokenStream} content See {@link Token#content content} * @param {string|string[]} [alias] The alias(es) of the token. * @param {string} [matchedStr=""] A copy of the full string this token was created from. * @class * @global * @public */function Token(type, content, alias, matchedStr) {/** * The type of the token. * * This is usually the key of a pattern in a {@link Grammar}. * * @type {string} * @see GrammarToken * @public */this.type = type;/** * The strings or tokens contained by this token. * * This will be a token stream if the pattern matched also defined an `inside` grammar. * * @type {string | TokenStream} * @public */this.content = content;/** * The alias(es) of the token. * * @type {string|string[]} * @see GrammarToken * @public */this.alias = alias;// Copy of the full string this token was created fromthis.length = (matchedStr || '').length | 0;}/** * A token stream is an array of strings and {@link Token Token} objects. * * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process * them. * * 1. No adjacent strings. * 2. No empty strings. * *    The only exception here is the token stream that only contains the empty string and nothing else. * * @typedef {Array&lt;string | Token&gt;} TokenStream * @global * @public *//** * Converts the given token or token stream to an HTML representation. * * The following hooks will be run: * 1. `wrap`: On each {@link Token}. * * @param {string | Token | TokenStream} o The token or token stream to be converted. * @param {string} language The name of current language. * @returns {string} The HTML representation of the token or token stream. * @memberof Token * @static */Token.stringify = function stringify(o, language) {if (typeof o == 'string') {return o;}if (Array.isArray(o)) {var s = '';o.forEach(function (e) {s += stringify(e, language);});return s;}var env = {type: o.type,content: stringify(o.content, language),tag: 'span',classes: ['token', o.type],attributes: {},language: language};var aliases = o.alias;if (aliases) {if (Array.isArray(aliases)) {Array.prototype.push.apply(env.classes, aliases);} else {env.classes.push(aliases);}}_.hooks.run('wrap', env);var attributes = '';for (var name in env.attributes) {attributes += ' ' + name + '="' + (env.attributes[name] || '').replace(/"/g, '"') + '"';}return '&lt;' + env.tag + ' class="' + env.classes.join(' ') + '"' + attributes + '&gt;' + env.content + '&lt;/' + env.tag + '&gt;';};/** * @param {RegExp} pattern * @param {number} pos * @param {string} text * @param {boolean} lookbehind * @returns {RegExpExecArray | null} */function matchPattern(pattern, pos, text, lookbehind) {pattern.lastIndex = pos;var match = pattern.exec(text);if (match &amp;&amp; lookbehind &amp;&amp; match[1]) {// change the match to remove the text matched by the Prism lookbehind groupvar lookbehindLength = match[1].length;match.index += lookbehindLength;match[0] = match[0].slice(lookbehindLength);}return match;}/** * @param {string} text * @param {LinkedList&lt;string | Token&gt;} tokenList * @param {any} grammar * @param {LinkedListNode&lt;string | Token&gt;} startNode * @param {number} startPos * @param {RematchOptions} [rematch] * @returns {void} * @private * * @typedef RematchOptions * @property {string} cause * @property {number} reach */function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {for (var token in grammar) {if (!grammar.hasOwnProperty(token) || !grammar[token]) {continue;}var patterns = grammar[token];patterns = Array.isArray(patterns) ? patterns : [patterns];for (var j = 0; j &lt; patterns.length; ++j) {if (rematch &amp;&amp; rematch.cause == token + ',' + j) {return;}var patternObj = patterns[j];var inside = patternObj.inside;var lookbehind = !!patternObj.lookbehind;var greedy = !!patternObj.greedy;var alias = patternObj.alias;if (greedy &amp;&amp; !patternObj.pattern.global) {// Without the global flag, lastIndex won't workvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];patternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');}/** @type {RegExp} */var pattern = patternObj.pattern || patternObj;for ( // iterate the token list and keep track of the current token/string positionvar currentNode = startNode.next, pos = startPos;currentNode !== tokenList.tail;pos += currentNode.value.length, currentNode = currentNode.next) {if (rematch &amp;&amp; pos &gt;= rematch.reach) {break;}var str = currentNode.value;if (tokenList.length &gt; text.length) {// Something went terribly wrong, ABORT, ABORT!return;}if (str instanceof Token) {continue;}var removeCount = 1; // this is the to parameter of removeBetweenvar match;if (greedy) {match = matchPattern(pattern, pos, text, lookbehind);if (!match || match.index &gt;= text.length) {break;}var from = match.index;var to = match.index + match[0].length;var p = pos;// find the node that contains the matchp += currentNode.value.length;while (from &gt;= p) {currentNode = currentNode.next;p += currentNode.value.length;}// adjust pos (and p)p -= currentNode.value.length;pos = p;// the current node is a Token, then the match starts inside another Token, which is invalidif (currentNode.value instanceof Token) {continue;}// find the last node which is affected by this matchfor (var k = currentNode;k !== tokenList.tail &amp;&amp; (p &lt; to || typeof k.value === 'string');k = k.next) {removeCount++;p += k.value.length;}removeCount--;// replace with the new matchstr = text.slice(pos, p);match.index -= pos;} else {match = matchPattern(pattern, 0, str, lookbehind);if (!match) {continue;}}// eslint-disable-next-line no-redeclarevar from = match.index;var matchStr = match[0];var before = str.slice(0, from);var after = str.slice(from + matchStr.length);var reach = pos + str.length;if (rematch &amp;&amp; reach &gt; rematch.reach) {rematch.reach = reach;}var removeFrom = currentNode.prev;if (before) {removeFrom = addAfter(tokenList, removeFrom, before);pos += before.length;}removeRange(tokenList, removeFrom, removeCount);var wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);currentNode = addAfter(tokenList, removeFrom, wrapped);if (after) {addAfter(tokenList, currentNode, after);}if (removeCount &gt; 1) {// at least one Token object was removed, so we have to do some rematching// this can only happen if the current pattern is greedy/** @type {RematchOptions} */var nestedRematch = {cause: token + ',' + j,reach: reach};matchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);// the reach might have been extended because of the rematchingif (rematch &amp;&amp; nestedRematch.reach &gt; rematch.reach) {rematch.reach = nestedRematch.reach;}}}}}}/** * @typedef LinkedListNode * @property {T} value * @property {LinkedListNode&lt;T&gt; | null} prev The previous node. * @property {LinkedListNode&lt;T&gt; | null} next The next node. * @template T * @private *//** * @template T * @private */function LinkedList() {/** @type {LinkedListNode&lt;T&gt;} */var head = { value: null, prev: null, next: null };/** @type {LinkedListNode&lt;T&gt;} */var tail = { value: null, prev: head, next: null };head.next = tail;/** @type {LinkedListNode&lt;T&gt;} */this.head = head;/** @type {LinkedListNode&lt;T&gt;} */this.tail = tail;this.length = 0;}/** * Adds a new node with the given value to the list. * * @param {LinkedList&lt;T&gt;} list * @param {LinkedListNode&lt;T&gt;} node * @param {T} value * @returns {LinkedListNode&lt;T&gt;} The added node. * @template T */function addAfter(list, node, value) {// assumes that node != list.tail &amp;&amp; values.length &gt;= 0var next = node.next;var newNode = { value: value, prev: node, next: next };node.next = newNode;next.prev = newNode;list.length++;return newNode;}/** * Removes `count` nodes after the given node. The given node will not be removed. * * @param {LinkedList&lt;T&gt;} list * @param {LinkedListNode&lt;T&gt;} node * @param {number} count * @template T */function removeRange(list, node, count) {var next = node.next;for (var i = 0; i &lt; count &amp;&amp; next !== list.tail; i++) {next = next.next;}node.next = next;next.prev = node;list.length -= i;}/** * @param {LinkedList&lt;T&gt;} list * @returns {T[]} * @template T */function toArray(list) {var array = [];var node = list.head.next;while (node !== list.tail) {array.push(node.value);node = node.next;}return array;}if (!_self.document) {if (!_self.addEventListener) {// in Node.jsreturn _;}if (!_.disableWorkerMessageHandler) {// In worker_self.addEventListener('message', function (evt) {var message = JSON.parse(evt.data);var lang = message.language;var code = message.code;var immediateClose = message.immediateClose;_self.postMessage(_.highlight(code, _.languages[lang], lang));if (immediateClose) {_self.close();}}, false);}return _;}// Get current script and highlightvar script = _.util.currentScript();if (script) {_.filename = script.src;if (script.hasAttribute('data-manual')) {_.manual = true;}}function highlightAutomaticallyCallback() {if (!_.manual) {_.highlightAll();}}if (!_.manual) {// If the document state is "loading", then we'll use DOMContentLoaded.// If the document state is "interactive" and the prism.js script is deferred, then we'll also use the// DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they// might take longer one animation frame to execute which can create a race condition where only some plugins have// been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.// See https://github.com/PrismJS/prism/issues/2102var readyState = document.readyState;if (readyState === 'loading' || readyState === 'interactive' &amp;&amp; script &amp;&amp; script.defer) {document.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);} else {if (window.requestAnimationFrame) {window.requestAnimationFrame(highlightAutomaticallyCallback);} else {window.setTimeout(highlightAutomaticallyCallback, 16);}}}return _;}(_self));if (typeof module !== 'undefined' &amp;&amp; module.exports) {module.exports = Prism;}// hack for components to work correctly in node.jsif (typeof global !== 'undefined') {global.Prism = Prism;}// some additional documentation/types/** * The expansion of a simple `RegExp` literal to support additional properties. * * @typedef GrammarToken * @property {RegExp} pattern The regular expression of the token. * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively) * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token. * @property {boolean} [greedy=false] Whether the token is greedy. * @property {string|string[]} [alias] An optional alias or list of aliases. * @property {Grammar} [inside] The nested grammar of this token. * * The `inside` grammar will be used to tokenize the text value of each token of this kind. * * This can be used to make nested and even recursive language definitions. * * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into * each another. * @global * @public *//** * @typedef Grammar * @type {Object&lt;string, RegExp | GrammarToken | Array&lt;RegExp | GrammarToken&gt;&gt;} * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar. * @global * @public *//** * A function which will invoked after an element was successfully highlighted. * * @callback HighlightCallback * @param {Element} element The element successfully highlighted. * @returns {void} * @global * @public *//** * @callback HookCallback * @param {Object&lt;string, any&gt;} env The environment variables of the hook. * @returns {void} * @global * @public *//* **********************************************     Begin prism-markup.js********************************************** */Prism.languages.markup = {'comment': {pattern: /&lt;!--(?:(?!&lt;!--)[\s\S])*?--&gt;/,greedy: true},'prolog': {pattern: /&lt;\?[\s\S]+?\?&gt;/,greedy: true},'doctype': {// https://www.w3.org/TR/xml/#NT-doctypedeclpattern: /&lt;!DOCTYPE(?:[^&gt;"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^&lt;"'\]]|"[^"]*"|'[^']*'|&lt;(?!!--)|&lt;!--(?:[^-]|-(?!-&gt;))*--&gt;)*\]\s*)?&gt;/i,greedy: true,inside: {'internal-subset': {pattern: /(^[^\[]*\[)[\s\S]+(?=\]&gt;$)/,lookbehind: true,greedy: true,inside: null // see below},'string': {pattern: /"[^"]*"|'[^']*'/,greedy: true},'punctuation': /^&lt;!|&gt;$|[[\]]/,'doctype-tag': /^DOCTYPE/i,'name': /[^\s&lt;&gt;'"]+/}},'cdata': {pattern: /&lt;!\[CDATA\[[\s\S]*?\]\]&gt;/i,greedy: true},'tag': {pattern: /&lt;\/?(?!\d)[^\s&gt;\/=$&lt;%]+(?:\s(?:\s*[^\s&gt;\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'"&gt;=]+(?=[\s&gt;]))|(?=[\s/&gt;])))+)?\s*\/?&gt;/,greedy: true,inside: {'tag': {pattern: /^&lt;\/?[^\s&gt;\/]+/,inside: {'punctuation': /^&lt;\/?/,'namespace': /^[^\s&gt;\/:]+:/}},'special-attr': [],'attr-value': {pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'"&gt;=]+)/,inside: {'punctuation': [{pattern: /^=/,alias: 'attr-equals'},{pattern: /^(\s*)["']|["']$/,lookbehind: true}]}},'punctuation': /\/?&gt;/,'attr-name': {pattern: /[^\s&gt;\/]+/,inside: {'namespace': /^[^\s&gt;\/:]+:/}}}},'entity': [{pattern: /&amp;[\da-z]{1,8};/i,alias: 'named-entity'},/&amp;#x?[\da-f]{1,8};/i]};Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =Prism.languages.markup['entity'];Prism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;// Plugin to make entity title show the real entity, idea by Roman KomarovPrism.hooks.add('wrap', function (env) {if (env.type === 'entity') {env.attributes['title'] = env.content.replace(/&amp;/, '&amp;');}});Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {/** * Adds an inlined language to markup. * * An example of an inlined language is CSS with `&lt;style&gt;` tags. * * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as * case insensitive. * @param {string} lang The language key. * @example * addInlined('style', 'css'); */value: function addInlined(tagName, lang) {var includedCdataInside = {};includedCdataInside['language-' + lang] = {pattern: /(^&lt;!\[CDATA\[)[\s\S]+?(?=\]\]&gt;$)/i,lookbehind: true,inside: Prism.languages[lang]};includedCdataInside['cdata'] = /^&lt;!\[CDATA\[|\]\]&gt;$/i;var inside = {'included-cdata': {pattern: /&lt;!\[CDATA\[[\s\S]*?\]\]&gt;/i,inside: includedCdataInside}};inside['language-' + lang] = {pattern: /[\s\S]+/,inside: Prism.languages[lang]};var def = {};def[tagName] = {pattern: RegExp(/(&lt;__[^&gt;]*&gt;)(?:&lt;!\[CDATA\[(?:[^\]]|\](?!\]&gt;))*\]\]&gt;|(?!&lt;!\[CDATA\[)[\s\S])*?(?=&lt;\/__&gt;)/.source.replace(/__/g, function () { return tagName; }), 'i'),lookbehind: true,greedy: true,inside: inside};Prism.languages.insertBefore('markup', 'cdata', def);}});Object.defineProperty(Prism.languages.markup.tag, 'addAttribute', {/** * Adds an pattern to highlight languages embedded in HTML attributes. * * An example of an inlined language is CSS with `style` attributes. * * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as * case insensitive. * @param {string} lang The language key. * @example * addAttribute('style', 'css'); */value: function (attrName, lang) {Prism.languages.markup.tag.inside['special-attr'].push({pattern: RegExp(/(^|["'\s])/.source + '(?:' + attrName + ')' + /\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'"&gt;=]+(?=[\s&gt;]))/.source,'i'),lookbehind: true,inside: {'attr-name': /^[^\s=]+/,'attr-value': {pattern: /=[\s\S]+/,inside: {'value': {pattern: /(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,lookbehind: true,alias: [lang, 'language-' + lang],inside: Prism.languages[lang]},'punctuation': [{pattern: /^=/,alias: 'attr-equals'},/"|'/]}}}});}});Prism.languages.html = Prism.languages.markup;Prism.languages.mathml = Prism.languages.markup;Prism.languages.svg = Prism.languages.markup;Prism.languages.xml = Prism.languages.extend('markup', {});Prism.languages.ssml = Prism.languages.xml;Prism.languages.atom = Prism.languages.xml;Prism.languages.rss = Prism.languages.xml;/* **********************************************     Begin prism-css.js********************************************** */(function (Prism) {var string = /(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;Prism.languages.css = {'comment': /\/\*[\s\S]*?\*\//,'atrule': {pattern: RegExp('@[\\w-](?:' + /[^;{\s"']|\s+(?!\s)/.source + '|' + string.source + ')*?' + /(?:;|(?=\s*\{))/.source),inside: {'rule': /^@[\w-]+/,'selector-function-argument': {pattern: /(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,lookbehind: true,alias: 'selector'},'keyword': {pattern: /(^|[^\w-])(?:and|not|only|or)(?![\w-])/,lookbehind: true}// See rest below}},'url': {// https://drafts.csswg.org/css-values-3/#urlspattern: RegExp('\\burl\\((?:' + string.source + '|' + /(?:[^\\\r\n()"']|\\[\s\S])*/.source + ')\\)', 'i'),greedy: true,inside: {'function': /^url/i,'punctuation': /^\(|\)$/,'string': {pattern: RegExp('^' + string.source + '$'),alias: 'url'}}},'selector': {pattern: RegExp('(^|[{}\\s])[^{}\\s](?:[^{};"\'\\s]|\\s+(?![\\s{])|' + string.source + ')*(?=\\s*\\{)'),lookbehind: true},'string': {pattern: string,greedy: true},'property': {pattern: /(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,lookbehind: true},'important': /!important\b/i,'function': {pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,lookbehind: true},'punctuation': /[(){};:,]/};Prism.languages.css['atrule'].inside.rest = Prism.languages.css;var markup = Prism.languages.markup;if (markup) {markup.tag.addInlined('style', 'css');markup.tag.addAttribute('style', 'css');}}(Prism));/* **********************************************     Begin prism-clike.js********************************************** */Prism.languages.clike = {'comment': [{pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind: true,greedy: true},{pattern: /(^|[^\\:])\/\/.*/,lookbehind: true,greedy: true}],'string': {pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy: true},'class-name': {pattern: /(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,lookbehind: true,inside: {'punctuation': /[.\\]/}},'keyword': /\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,'boolean': /\b(?:false|true)\b/,'function': /\b\w+(?=\()/,'number': /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,'operator': /[&lt;&gt;]=?|[!=]=?=?|--?|\+\+?|&amp;&amp;?|\|\|?|[?*/~^%]/,'punctuation': /[{}[\];(),.:]/};/* **********************************************     Begin prism-javascript.js********************************************** */Prism.languages.javascript = Prism.languages.extend('clike', {'class-name': [Prism.languages.clike['class-name'],{pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,lookbehind: true}],'keyword': [{pattern: /((?:^|\})\s*)catch\b/,lookbehind: true},{pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,lookbehind: true},],// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)'function': /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,'number': {pattern: RegExp(/(^|[^\w$])/.source +'(?:' +(// constant/NaN|Infinity/.source +'|' +// binary integer/0[bB][01]+(?:_[01]+)*n?/.source +'|' +// octal integer/0[oO][0-7]+(?:_[0-7]+)*n?/.source +'|' +// hexadecimal integer/0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source +'|' +// decimal bigint/\d+(?:_\d+)*n/.source +'|' +// decimal number (integer or float) but no bigint/(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source) +')' +/(?![\w$])/.source),lookbehind: true},'operator': /--|\+\+|\*\*=?|=&gt;|&amp;&amp;=?|\|\|=?|[!=]==|&lt;&lt;=?|&gt;&gt;&gt;?=?|[-+*/%&amp;|^!=&lt;&gt;]=?|\.{3}|\?\?=?|\?\.?|[~:]/});Prism.languages.javascript['class-name'][0].pattern = /(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/;Prism.languages.insertBefore('javascript', 'keyword', {'regex': {pattern: RegExp(// lookbehind// eslint-disable-next-line regexp/no-dupe-characters-character-class/((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)/.source +// Regex pattern:// There are 2 regex patterns here. The RegExp set notation proposal added support for nested character// classes if the `v` flag is present. Unfortunately, nested CCs are both context-free and incompatible// with the only syntax, so we have to define 2 different regex patterns./\//.source +'(?:' +/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}/.source +'|' +// `v` flag syntax. This supports 3 levels of nested character classes./(?:\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.)*\])*\])*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source +')' +// lookahead/(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/.source),lookbehind: true,greedy: true,inside: {'regex-source': {pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,lookbehind: true,alias: 'language-regex',inside: Prism.languages.regex},'regex-delimiter': /^\/|\/$/,'regex-flags': /^[a-z]+$/,}},// This must be declared before keyword because we use "function" inside the look-forward'function-variable': {pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=&gt;))/,alias: 'function'},'parameter': [{pattern: /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,lookbehind: true,inside: Prism.languages.javascript},{pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=&gt;)/i,lookbehind: true,inside: Prism.languages.javascript},{pattern: /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=&gt;)/,lookbehind: true,inside: Prism.languages.javascript},{pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,lookbehind: true,inside: Prism.languages.javascript}],'constant': /\b[A-Z](?:[A-Z_]|\dx?)*\b/});Prism.languages.insertBefore('javascript', 'string', {'hashbang': {pattern: /^#!.*/,greedy: true,alias: 'comment'},'template-string': {pattern: /`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,greedy: true,inside: {'template-punctuation': {pattern: /^`|`$/,alias: 'string'},'interpolation': {pattern: /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,lookbehind: true,inside: {'interpolation-punctuation': {pattern: /^\$\{|\}$/,alias: 'punctuation'},rest: Prism.languages.javascript}},'string': /[\s\S]+/}},'string-property': {pattern: /((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,lookbehind: true,greedy: true,alias: 'property'}});Prism.languages.insertBefore('javascript', 'operator', {'literal-property': {pattern: /((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,lookbehind: true,alias: 'property'},});if (Prism.languages.markup) {Prism.languages.markup.tag.addInlined('script', 'javascript');// add attribute support for all DOM events.// https://developer.mozilla.org/en-US/docs/Web/Events#Standard_eventsPrism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,'javascript');}Prism.languages.js = Prism.languages.javascript;/* **********************************************     Begin prism-file-highlight.js********************************************** */(function () {if (typeof Prism === 'undefined' || typeof document === 'undefined') {return;}// https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfillif (!Element.prototype.matches) {Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;}var LOADING_MESSAGE = 'Loading…';var FAILURE_MESSAGE = function (status, message) {return '✖ Error ' + status + ' while fetching file: ' + message;};var FAILURE_EMPTY_MESSAGE = '✖ Error: File does not exist or is empty';var EXTENSIONS = {'js': 'javascript','py': 'python','rb': 'ruby','ps1': 'powershell','psm1': 'powershell','sh': 'bash','bat': 'batch','h': 'c','tex': 'latex'};var STATUS_ATTR = 'data-src-status';var STATUS_LOADING = 'loading';var STATUS_LOADED = 'loaded';var STATUS_FAILED = 'failed';var SELECTOR = 'pre[data-src]:not([' + STATUS_ATTR + '="' + STATUS_LOADED + '"])'+ ':not([' + STATUS_ATTR + '="' + STATUS_LOADING + '"])';/** * Loads the given file. * * @param {string} src The URL or path of the source file to load. * @param {(result: string) =&gt; void} success * @param {(reason: string) =&gt; void} error */function loadFile(src, success, error) {var xhr = new XMLHttpRequest();xhr.open('GET', src, true);xhr.onreadystatechange = function () {if (xhr.readyState == 4) {if (xhr.status &lt; 400 &amp;&amp; xhr.responseText) {success(xhr.responseText);} else {if (xhr.status &gt;= 400) {error(FAILURE_MESSAGE(xhr.status, xhr.statusText));} else {error(FAILURE_EMPTY_MESSAGE);}}}};xhr.send(null);}/** * Parses the given range. * * This returns a range with inclusive ends. * * @param {string | null | undefined} range * @returns {[number, number | undefined] | undefined} */function parseRange(range) {var m = /^\s*(\d+)\s*(?:(,)\s*(?:(\d+)\s*)?)?$/.exec(range || '');if (m) {var start = Number(m[1]);var comma = m[2];var end = m[3];if (!comma) {return [start, start];}if (!end) {return [start, undefined];}return [start, Number(end)];}return undefined;}Prism.hooks.add('before-highlightall', function (env) {env.selector += ', ' + SELECTOR;});Prism.hooks.add('before-sanity-check', function (env) {var pre = /** @type {HTMLPreElement} */ (env.element);if (pre.matches(SELECTOR)) {env.code = ''; // fast-path the whole thing and go to completepre.setAttribute(STATUS_ATTR, STATUS_LOADING); // mark as loading// add code element with loading messagevar code = pre.appendChild(document.createElement('CODE'));code.textContent = LOADING_MESSAGE;var src = pre.getAttribute('data-src');var language = env.language;if (language === 'none') {// the language might be 'none' because there is no language set;// in this case, we want to use the extension as the languagevar extension = (/\.(\w+)$/.exec(src) || [, 'none'])[1];language = EXTENSIONS[extension] || extension;}// set language classesPrism.util.setLanguage(code, language);Prism.util.setLanguage(pre, language);// preload the languagevar autoloader = Prism.plugins.autoloader;if (autoloader) {autoloader.loadLanguages(language);}// load fileloadFile(src,function (text) {// mark as loadedpre.setAttribute(STATUS_ATTR, STATUS_LOADED);// handle data-rangevar range = parseRange(pre.getAttribute('data-range'));if (range) {var lines = text.split(/\r\n?|\n/g);// the range is one-based and inclusive on both endsvar start = range[0];var end = range[1] == null ? lines.length : range[1];if (start &lt; 0) { start += lines.length; }start = Math.max(0, Math.min(start - 1, lines.length));if (end &lt; 0) { end += lines.length; }end = Math.max(0, Math.min(end, lines.length));text = lines.slice(start, end).join('\n');// add data-start for line numbersif (!pre.hasAttribute('data-start')) {pre.setAttribute('data-start', String(start + 1));}}// highlight codecode.textContent = text;Prism.highlightElement(code);},function (error) {// mark as failedpre.setAttribute(STATUS_ATTR, STATUS_FAILED);code.textContent = error;});}});Prism.plugins.fileHighlight = {/** * Executes the File Highlight plugin for all matching `pre` elements under the given container. * * Note: Elements which are already loaded or currently loading will not be touched by this method. * * @param {ParentNode} [container=document] */highlight: function highlight(container) {var elements = (container || document).querySelectorAll(SELECTOR);for (var i = 0, element; (element = elements[i++]);) {Prism.highlightElement(element);}}};var logged = false;/** @deprecated Use `Prism.plugins.fileHighlight.highlight` instead. */Prism.fileHighlight = function () {if (!logged) {console.warn('Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.');logged = true;}Prism.plugins.fileHighlight.highlight.apply(this, arguments);};}());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
